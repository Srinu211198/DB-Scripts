-- MYSQL DB All object Script

-- Database
-- ========================

CREATE DATABASE IF NOT EXISTS SDB_DB2;

CREATE DATABASE SDB_DB3 CHARACTER SET 'keybcs2';

CREATE DATABASE SDB_DB10 Default CHARACTER SET 'keybcs2' COLLATE 'keybcs2_bin';

CREATE DATABASE SDB_DB12 Default CHARACTER SET 'keybcs2' Default COLLATE 'keybcs2_bin';

CREATE DATABASE SDB_DB22 Default CHARACTER SET 'keybcs2' COLLATE keybcs2_bin ENCRYPTION 'y' ;

CREATE DATABASE SDB_DB26 Default CHARACTER SET 'keybcs2' Default COLLATE 'keybcs2_bin' Default ENCRYPTION 'n' ;

-- Max length 64 characters

CREATE DATABASE SDB_DB63_adsfgdfsadsfkdcvdcvdvcdvrrrrrfdgdfgdgdasdseudgfhgfhr_64 Default CHARACTER SET 'keybcs2' Default COLLATE 'keybcs2_bin' Default ENCRYPTION 'n' ;


-- Role
-- ========================


CREATE Role 'role2', 'yes';

CREATE ROLE 'Role3'@'localhost';

CREATE Role IF NOT EXISTS Role5, XYZ;

CREATE ROLE IF NOT EXISTS 'Role6'@'localhost'; 

CREATE  ROLE 076____$$$Aa;

-- Create Role with maximum length (32 is the maximum length)

CREATE  ROLE ________$$$$$$$$$$$$$$$123__0999; 


-- User
-- ========================

CREATE USER 'USER6'@'localhost'IDENTIFIED BY 'new_password' PASSWORD EXPIRE;

CREATE USER 'user14'@'localhost'IDENTIFIED WITH caching_sha2_password BY 'new_password' PASSWORD EXPIRE INTERVAL 180 DAY FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3;

CREATE USER
 'USER9'@'localhost' IDENTIFIED WITH mysql_native_password
 BY 'new_password1',
 'USER10'@'localhost' IDENTIFIED WITH caching_sha2_password
 BY 'new_password2'
 REQUIRE X509 WITH MAX_QUERIES_PER_HOUR 60
 PASSWORD HISTORY 5
 ACCOUNT LOCK;
 
 
CREATE USER USER13 DEFAULT ROLE role1;

CREATE USER USER14 IDENTIFIED BY RANDOM PASSWORD;

CREATE USER USER15 IDENTIFIED BY 'ASKJF';

CREATE USER USER16 IDENTIFIED BY RANDOM PASSWORD, USER17 IDENTIFIED BY 'ASKJF';

CREATE USER USER18 REQUIRE NONE;

CREATE USER USER19 REQUIRE SSL;

CREATE USER USER20 REQUIRE X509;

CREATE USER USER21 REQUIRE  CIPHER 'cipher';

CREATE USER USER22 REQUIRE  ISSUER 'issuer';

CREATE USER USER24 REQUIRE  SUBJECT 'FOLLOW' ISSUER 'issuer' ;

CREATE USER USER25 REQUIRE  SUBJECT 'FOLLOW' AND ISSUER 'issuer';

CREATE USER USER26 WITH MAX_QUERIES_PER_HOUR 3;

CREATE USER USER27 WITH MAX_UPDATES_PER_HOUR 8;

CREATE USER USER28 WITH MAX_CONNECTIONS_PER_HOUR 0;

CREATE USER USER29 WITH MAX_USER_CONNECTIONS 56;

CREATE USER USER30 PASSWORD EXPIRE DEFAULT;

CREATE USER USER31 PASSWORD EXPIRE NEVER;

CREATE USER USER32 PASSWORD EXPIRE  INTERVAL 2 DAY;

CREATE USER USER33 PASSWORD HISTORY DEFAULT;

CREATE USER USER34 PASSWORD HISTORY 3;

CREATE USER USER35 PASSWORD REUSE INTERVAL DEFAULT;

CREATE USER USER36 PASSWORD REUSE INTERVAL 4 DAY;

CREATE USER USER37 PASSWORD REQUIRE CURRENT DEFAULT;

CREATE USER USER38 PASSWORD REQUIRE CURRENT OPTIONAL;

CREATE USER USER42 ACCOUNT LOCK;

CREATE USER USER43 ACCOUNT UNLOCK;

CREATE USER USER44 COMMENT 'Correct';


-- Create user with Maximum Length (32)

CREATE USER USER13DWUSHCSASGAJKNVCyNJHUIS_32;

CREATE USER ________$$$$$$$$$$$$$$$123__0999;



-- View
-- ========================


CREATE SCHEMA v_schema10;

CREATE TABLE tab1
(
tab1_col1 FLOAT,
tab1_co2 VARBINARY(1),
tab1_co3 CHAR NULL,
tab1_col4 CHAR,
tab1_col5 VARCHAR(1),
tab1_col6 SMALLINT,
tab1_col7 BOOLEAN
);


CREATE TABLE tab2
(
tab2_col1 DATE,
tab2_col2 TIME,
tab2_col3 TIMESTAMP,
tab2_col4 VARBINARY(6),
tab2_col5 FLOAT(15),
tab2_col6 CHAR(1),
tab2_col7 VARCHAR(1),
tab2_col8 INT,
tab2_col9 NUMERIC(1),
tab2_col10 NUMERIC(1,0),
tab2_col11 DECIMAL(30,30),
tab2_col12 DECIMAL(1,0),
tab2_col13 DECIMAL(1),
tab2_col14 BOOLEAN
);


CREATE TABLE tab3
(
tab3_col1 CHAR,
tab3_col2 INTEGER,
tab3_col3 VARCHAR(8),
tab3_col4 MEDIUMTEXT,
tab3_col5 DECIMAL,
tab3_col6 BOOLEAN,
tab3_col7 DATETIME(6),
tab3_col8 BIGINT
);

CREATE TABLE tab4
(
tab4_col1 NUMERIC(14,5),
tab4_col2 NUMERIC(10),
tab4_col3 NUMERIC,
tab4_col4 CHAR,
tab4_col5 LONGTEXT,
tab4_col6 VARCHAR(10),
tab4_col7 BOOLEAN,
tab4_col8 TIME
);

-- view Script
CREATE OR REPLACE ALGORITHM = UNDEFINED VIEW view4 AS Select tab1_col1 from tab1;

CREATE OR REPLACE ALGORITHM = MERGE VIEW view5 AS Select tab3_col7 from tab3;

CREATE ALGORITHM = TEMPTABLE VIEW view6 AS Select tab4_col8 from tab4;

CREATE OR REPLACE SQL SECURITY DEFINER VIEW view7 AS Select tab1_col1 from tab1;

CREATE SQL SECURITY INVOKER VIEW view8 AS Select tab2_col3 from tab2;

CREATE OR REPLACE  VIEW view9 AS Select tab3_col3 from tab3 with LOCAL CHECK OPTION;

CREATE OR REPLACE  VIEW view10 AS Select tab2_col3 from tab2 with CASCADED CHECK OPTION;

CREATE ALGORITHM = TEMPTABLE SQL SECURITY INVOKER VIEW view11  AS Select tab4_col8 from tab4;

CREATE OR REPLACE ALGORITHM = MERGE SQL SECURITY DEFINER VIEW view12 AS Select tab4_col2 from tab4 with CASCADED CHECK OPTION;


-- Trigger
-- ========================

CREATE USER MDB_TRIG_USER1 IDENTIFIED BY 'Notallowed1!';

CREATE ROLE MDB_TRIG_ROLE1;

CREATE TABLE MDB_TRIG_TAB1(
	employeeNumber INT ,
	lastname VARCHAR(50) ,
	changedat DATETIME
);   
 
 
CREATE TABLE MDB_TRIG_TAB2(
    id INT AUTO_INCREMENT PRIMARY KEY,
    employeeNumber INT NOT NULL,
    lastname VARCHAR(50) NOT NULL,
    changedat DATETIME DEFAULT NULL,
    action VARCHAR(50) DEFAULT NULL
);


-- End of Pre-requisite objects

-- Start of the Script

-- Create a Trigger using Before option


CREATE TRIGGER MDB_TRIG1 
    BEFORE UPDATE ON MDB_TRIG_TAB1
    FOR EACH ROW 
 INSERT INTO MDB_TRIG_TAB2
 SET action = 'update',
     employeeNumber = OLD.employeeNumber,
     lastname = OLD.lastname,
	changedat = NOW();
	

CREATE DEFINER=MDB_TRIG_USER1 TRIGGER MDB_TRIG5 
		BEFORE UPDATE ON MDB_TRIG_TAB1
		FOR EACH ROW 
		FOLLOWS MDB_TRIG3 
	UPDATE MDB_TRIG_TAB2
	SET 
    lastName = 'ABCD'
	WHERE
    employeeNumber = 2222;


CREATE DEFINER=MDB_TRIG_ROLE1 TRIGGER MDB_TRIG6 
		BEFORE UPDATE ON MDB_TRIG_TAB1
		FOR EACH ROW 
		PRECEDES MDB_TRIG3 
	UPDATE MDB_TRIG_TAB2
	SET 
    changedat = 3-1-2020
	WHERE
    employeeNumber = 1111;


CREATE DEFINER=CURRENT_USER TRIGGER MDB_TRIG7 
		BEFORE INSERT ON MDB_TRIG_TAB1
		FOR EACH ROW  
	UPDATE MDB_TRIG_TAB2
	SET 
    changedat = SYSDATE(); 


CREATE DEFINER=MDB_TRIG_ROLE1 TRIGGER MDB_TRIG10 
		BEFORE DELETE ON MDB_TRIG_TAB1
		FOR EACH ROW  
		FOLLOWS MDB_TRIG9 
	DELETE FROM MDB_TRIG_TAB2 WHERE employeeNumber=333;

CREATE TABLE MDB_TRIG_TAB3 (
	id INT NOT NULL AUTO_INCREMENT, 
	name CHAR(30) NOT NULL, 
	color VARCHAR(20),
	PRIMARY KEY (`id`)
);

CREATE DEFINER=MDB_TRIG_USER1 
		TRIGGER MDB_TRIG21
		AFTER INSERT ON MDB_TRIG_TAB3
		FOR EACH ROW 
		PRECEDES MDB_TRIG13
	 UPDATE MDB_TRIG_TAB4
	SET 
	 id=ROUND(35.7)
	WHERE
     animals = 789;
	 

CREATE DEFINER=CURRENT_USER 
		TRIGGER  MDB_TRIG23
		BEFORE UPDATE ON MDB_TRIG_TAB1
		FOR EACH ROW 
		PRECEDES MDB_TRIG6
	 UPDATE MDB_TRIG_TAB2
	SET 
	 changedat= DAYOFMONTH('2020-01-01')
	WHERE
     ACTION = 'UPDATE';

	 
-- Stored Procedure
-- ========================
CREATE TABLE STAB2
(
tab500_col1 FLOAT,
tab500_col4 VARBINARY(1),
tab500_col6 CHAR NULL,
tab500_col7 CHAR,
tab500_col10 VARCHAR(1),
tab500_col13 SMALLINT,
tab500_col14 INTEGER,
tab500_col15 BIGINT,
tab500_col16 NUMERIC
);


CREATE TABLE STAB11(CDATE CHAR(10), I INTEGER, D DECIMAL, F FLOAT, DT DATE, TM TIME, TS TIMESTAMP) ;

CREATE TABLE STAB12
(tab532_col1 CHAR(10), tab532_col2 INTEGER, tab532_col3 DECIMAL, tab532_col4 FLOAT, tab532_col5 DATE, tab532_col6 TIME, tab532_col7 TIMESTAMP) ;

CREATE PROCEDURE SROC4(OUT param4 FLOAT, param5 VARBINARY(1))
SELECT DISTINCT
tab500_col1,
tab500_col4 INTO param4,param5 FROM STAB2;

CREATE DEFINER = S_USER1 PROCEDURE SROC18(OUT param31 FLOAT) DETERMINISTIC READS SQL DATA
SELECT ATAN (F) FROM STAB11 ;

CREATE PROCEDURE SROC19(OUT param32 FLOAT) NOT DETERMINISTIC MODIFIES SQL DATA
SELECT SUM(tab532_col2) FROM STAB12 ;

CREATE DEFINER = CURRENT_USER  PROCEDURE SROC10() SELECT COUNT(*) FROM STAB2;

DELIMITER //
CREATE procedure SROC25 ( OUT ending_value INT )
DETERMINISTIC  
BEGIN  
DECLARE total_value INT;
SET total_value = 50;
label1: WHILE total_value <= 3000 DO
SET total_value = total_value * 2;
END WHILE label1;
SET ending_value = total_value;
END; //
DELIMITER ;


CREATE SCHEMA S_schema2;


CREATE TABLE S_schema2.STAB3
(
tab503_col1 NUMERIC(14,5),
tab503_col2 NUMERIC(10),
tab503_col3 NUMERIC,
tab503_col4 CHAR,
tab503_col6 POINT,
tab503_col7 BOOLEAN,
tab503_col8 TIME
);


CREATE PROCEDURE S_schema2.SROC6$__123(IN param11 NUMERIC(14,5), param12 CHAR, param13 TIME)
SELECT DISTINCT
tab503_col1,
tab503_col4,
tab503_col8 INTO param11,param12,param13 FROM S_schema2.STAB3;

CREATE TABLE STAB4_102345678_202345678_302345678_402345678
(
tab525c_102345678_202345678_302345678_402345678 INT,
tab525_col2 VARCHAR(1)
);

-- Max Length for Procedure name is 64

CREATE PROCEDURE PROdsdgdfgkdjfglsglskjdflsdkfsldkgldfkgddflpdoispsdfdsfgdlgdgdC9 (IN param22 INT, param23 VARCHAR(1))
SELECT
tab525c_102345678_202345678_302345678_402345678
tab525_col2 INTO param22,param23 FROM STAB4_102345678_202345678_302345678_402345678;

-- Index
-- ========================
CREATE TABLE MDB_INDX_TAB1
  (  
	TAB1_COL1 CHAR(20) NOT NULL,
    TAB1_COL2 VARCHAR(20) PRIMARY KEY,
    TAB1_COL3 JSON,
    TAB1_COL4 FLOAT(10),
    TAB1_COL5 TIMESTAMP,
    TAB1_COL6 DECIMAL(4,2),
    TAB1_COL7 INTEGER(20)
  );
  
CREATE TABLE MDB_INDX_TAB2
(  
 TAB2_COL1 VARCHAR(30) NOT NULL,
 TAB2_COL2 BOOLEAN,
 TAB2_COL3 TIME,
 TAB2_COL4 VARBINARY(10),
 TAB2_COL5 SMALLINT,
 TAB2_COL6 DECIMAL(38,30),
 TAB2_COL7 BIGINT
);
  
CREATE TABLE MDB_INDX_TAB3
(  
 TAB3_COL1 POINT NOT NULL,
 TAB3_COL2 GEOMETRY NOT NULL,
 TAB3_COL3 POLYGON NOT NULL,
 TAB3_COL4 LINESTRING NOT NULL,
 TAB3_COL5 MULTIPOINT NOT NULL,
 TAB3_COL6 JSON NOT NULL,
 TAB3_COL7 POINT NOT NULL,
 SPATIAL INDEX(TAB3_COL2)
);  


CREATE INDEX MDB_INDX1_$ ON MDB_INDX_TAB1 (TAB1_COL1(2) DESC)KEY_BLOCK_SIZE 1234567890 COMMENT 'INDEX1' VISIBLE LOCK EXCLUSIVE;

CREATE UNIQUE INDEX MDB_INDX6 USING HASH ON MDB_INDX_TAB1 ((CAST(TAB1_COL3->'$.zip' AS UNSIGNED ARRAY))) VISIBLE KEY_BLOCK_SIZE 100 ALGORITHM COPY LOCK EXCLUSIVE; 

CREATE UNIQUE INDEX MDB_INDX12 USING HASH ON MDB_INDX_TAB2(TAB2_COL1(18) DESC) USING BTREE COMMENT 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijk$lmno$_1024' 
ALGORITHM INPLACE LOCK EXCLUSIVE;

CREATE FULLTEXT INDEX MDB_INDX24_1234567890_1234567890_1234567890_1234567890_123456_64 ON MDB_INDX_TAB1(TAB1_COL2) COMMENT 'COMMENT2TYRFHG' VISIBLE LOCK SHARED  ALGORITHM COPY ; 

CREATE SPATIAL INDEX MDB_INDX18 ON MDB_INDX_TAB3 (TAB3_COL1) VISIBLE KEY_BLOCK_SIZE 6576563 ALGORITHM COPY LOCK EXCLUSIVE ;

CREATE SPATIAL INDEX MDB_INDX19 ON MDB_INDX_TAB3(TAB3_COL2) INVISIBLE KEY_BLOCK_SIZE 57653 ALGORITHM DEFAULT LOCK SHARED ;

CREATE UNIQUE INDEX MDB_INDX9 ON MDB_INDX_TAB1 (TAB1_COL1 DESC,TAB1_COL2 ASC,TAB1_COL5 DESC,TAB1_COL4) KEY_BLOCK_SIZE 1234567890 ALGORITHM COPY LOCK SHARED;

CREATE UNIQUE INDEX MDB_INDX10 ON MDB_INDX_TAB2 (TAB2_COL1 ASC,TAB2_COL2 DESC,TAB2_COL3)USING BTREE ALGORITHM INPLACE LOCK DEFAULT;

-- Logfile group
-- ======================

 CREATE LOGFILE GROUP MSDB_LOGFGRP8
    ADD UNDOFILE 'MSDB_LOGFGRP8.dat'
	INITIAL_SIZE = 666M
	UNDO_BUFFER_SIZE = 777M
	REDO_BUFFER_SIZE = 888M	
	NODEGROUP 98765098765
	WAIT
	COMMENT 'All NDB Cluster Disk Data objects share the same namespace. This means that each Disk Data object must be uniquely named (and not merely each Disk Data object of a given type). For example, you cannot have a tablespace and a log file group with the same name, or a tablespace and a data file with the same name.'
    ENGINE = NDBCLUSTER;	
	
-- Maxlength
CREATE LOGFILE GROUP MSDB_LOGFGRP13_ABCDEFGHIJKLMNOPQRSTUVWX_abcdefghijklmnopqrstu_64
ADD UNDOFILE 'MSDB_LOGFGRP13.dat'
INITIAL_SIZE = 444M
UNDO_BUFFER_SIZE = 555M
REDO_BUFFER_SIZE = 666M	
ENGINE = NDB;


-- The Max length for comment is 2048 characters

CREATE LOGFILE GROUP MSDB_LOGFGRP14_1234567890_1234567890_1234567890_1234567890_12_64
ADD UNDOFILE 'MSDB_LOGFGRP14.dat'
NODEGROUP 11111111111
WAIT

ENGINE = NDBCLUSTER;	


-- Server
-- ======================
CREATE SERVER MSDB_SERVER11 FOREIGN DATA WRAPPER WRAPPER11
OPTIONS (HOST '255.255.255.0', DATABASE 'DB3', USER 'USER4', PASSWORD 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', SOCKET 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_1234567890', OWNER 'OWNER2');


CREATE SERVER MSDB_SERVER12 FOREIGN DATA WRAPPER WRAPPER12
OPTIONS (HOST '255.255.255.012', DATABASE 'DB4', USER 'USER5', PASSWORD 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_1234567890', SOCKET 'ABCDEFGHIJ', OWNER 'OWNER3', PORT 12345);

-- Create Server for Options with blank (empty) string

CREATE SERVER MSDB_SERVER13 FOREIGN DATA WRAPPER WRAPPER13
OPTIONS (HOST '', DATABASE '', USER '', PASSWORD '', SOCKET '', OWNER '', PORT 0 );


/* Maximum Length = 64 Characters and valid Special characters are _, $ (Pg_No: 1793, 1795)  */

-- Start of the Script

CREATE SERVER MSDB_SERVER16_ABCDEFGHIJKLMNOPQRSTUVWXY_ABCDEFGHIJKLMNOPQRSTU_64 FOREIGN DATA WRAPPER mysql
OPTIONS (HOST '198.51.100.106', DATABASE 'TESTDB', USER 'Remote');


CREATE SERVER msdb_server17_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrst_64 FOREIGN DATA WRAPPER mysql_wrapper_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrst_64
OPTIONS (HOST '255.255.255.123', DATABASE 'mysql_DB_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxy_64', USER 'mysql_USER_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvw_64', PASSWORD 'mysql_Password_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrs_64', SOCKET 'mysql_Socket_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstu_64', OWNER 'mysql_Owner4_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstu_64', PORT 
1234567890123456789012345678901234567890123456789012345678901264);


-- SPATIAL REFERENCE SYSTEM
-- =========================


CREATE OR REPLACE SPATIAL REFERENCE SYSTEM 111222333
NAME 'MSDB_SPREFSYS7'
ORGANIZATION 'MySQL' IDENTIFIED BY 111222333
DEFINITION
'PROJCS["ETRS89 / UTM zone 37N (N-E)",GEOGCS["ETRS89",DATUM["European Terrestrial Reference System 1989",SPHEROID["GRS 1980",6378137,298.257222101,AUTHORITY["EPSG","7019"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6258"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.017453292519943278,AUTHORITY["EPSG","9122"]],AXIS["Lat",NORTH],AXIS["Lon",EAST],AUTHORITY["EPSG","4258"]],PROJECTION["Transverse Mercator",AUTHORITY["EPSG","9807"]],PARAMETER["Latitude of natural origin",0,AUTHORITY["EPSG","8801"]],PARAMETER["Longitude of natural origin",39,AUTHORITY["EPSG","8802"]],PARAMETER["Scale factor at natural origin",0.9996,AUTHORITY["EPSG","8805"]],PARAMETER["False easting",500000,AUTHORITY["EPSG","8806"]],PARAMETER["False northing",0,AUTHORITY["EPSG","8807"]],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["N",NORTH],AXIS["E",EAST],AUTHORITY["EPSG","3049"]]'
DESCRIPTION 
'This statement creates a spatial reference system (SRS) definition and stores it in the data dictionary. It requires the SUPER privilege. The resulting data dictionary entry can be inspected using the INFORMATION_SCHEMA ST_SPATIAL_REFERENCE_SYSTEMS table.';




CREATE SPATIAL REFERENCE SYSTEM IF NOT EXISTS 12121212
NAME 'MSDB_SPREFSYS8'
ORGANIZATION 'EPSG' IDENTIFIED BY 12121212
DEFINITION
'PROJCS["NAD27(CGQ77) / UTM zone 17N",GEOGCS["NAD27(CGQ77)",DATUM["North American Datum 1927 (CGQ77)",SPHEROID["Clarke 1866",6378206.4,294.9786982138982,AUTHORITY["EPSG","7008"]],AUTHORITY["EPSG","6609"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.017453292519943278,AUTHORITY["EPSG","9122"]],AXIS["Lat",NORTH],AXIS["Lon",EAST],AUTHORITY["EPSG","4609"]],PROJECTION["Transverse Mercator",AUTHORITY["EPSG","9807"]],PARAMETER["Latitude of natural origin",0,AUTHORITY["EPSG","8801"]],PARAMETER["Longitude of natural origin",-81,AUTHORITY["EPSG","8802"]],PARAMETER["Scale factor at natural origin",0.9996,AUTHORITY["EPSG","8805"]],PARAMETER["False easting",500000,AUTHORITY["EPSG","8806"]],PARAMETER["False northing",0,AUTHORITY["EPSG","8807"]],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["E",EAST],AXIS["N",NORTH],AUTHORITY["EPSG","2031"]]'
DESCRIPTION 
'The specification does not make AXIS clauses mandatory in GEOGCS spatial reference system definitions. However, if there are no AXIS clauses, MySQL cannot determine whether a definition has axes in latitude-longitude order or longitude-latitude order. MySQL enforces the nonstandard requirement that each GEOGCS definition must include two AXIS clauses. One must be NORTH or SOUTH, and the other EAST or WEST. The AXIS clause order determines whether the definition has axes in latitude-longitude order or longitude-latitude order.';


/* Maximum Length for Name of SPATIAL REFERENCE SYSTEM = 80 Characters and valid Special characters are _, $ (Pg_No: 1793, 1795)  */

/*Table 13.6 CREATE SPATIAL REFERENCE SYSTEM Attribute Lengths

Attribute		Maximum Length (characters)
NAME			80
DEFINITION		4096
ORGANIZATION	256
DESCRIPTION		2048

*/

-- Start of the Script

CREATE SPATIAL REFERENCE SYSTEM 98765432 
	NAME 'MSDB_SPREFSYS11_ABCDEFGHIJKLMNOPQRSTUVWXY_ABCDEFGHIJKLMNOPQRSTUVZ_ABCDEFGHIJK_80'
	DEFINITION 'PROJCS["NAD27(CGQ77) / SCoPQ zone 10",GEOGCS["NAD27(CGQ77)",DATUM["North American Datum 1927 (CGQ77)",SPHEROID["Clarke 1866",6378206.4,294.9786982138982,AUTHORITY["EPSG","7008"]],AUTHORITY["EPSG","6609"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.017453292519943278,AUTHORITY["EPSG","9122"]],AXIS["Lat",NORTH],AXIS["Lon",EAST],AUTHORITY["EPSG","4609"]],PROJECTION["Transverse Mercator",AUTHORITY["EPSG","9807"]],PARAMETER["Latitude of natural origin",0,AUTHORITY["EPSG","8801"]],PARAMETER["Longitude of natural origin",-79.5111111111111,AUTHORITY["EPSG","8802"]],PARAMETER["Scale factor at natural origin",0.9999,AUTHORITY["EPSG","8805"]],PARAMETER["False easting",304800,AUTHORITY["EPSG","8806"]],PARAMETER["False northing",0,AUTHORITY["EPSG","8807"]],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["X",EAST],AXIS["Y",NORTH],AUTHORITY["EPSG","2016"]]';


CREATE OR REPLACE SPATIAL REFERENCE SYSTEM 887766
NAME 'msdb_sprefsys12_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefg_80'
ORGANIZATION 'ORGANIZATION_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWX_256' IDENTIFIED BY 887766
DEFINITION
'PROJCS["NAD27(76) / MTM zone 15",GEOGCS["NAD27(76)",DATUM["North American Datum 1927 (1976)",SPHEROID["Clarke 1866",6378206.4,294.9786982138982,AUTHORITY["EPSG","7008"]],AUTHORITY["EPSG","6608"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.017453292519943278,AUTHORITY["EPSG","9122"]],AXIS["Lat",NORTH],AXIS["Lon",EAST],AUTHORITY["EPSG","4608"]],PROJECTION["Transverse Mercator",AUTHORITY["EPSG","9807"]],PARAMETER["Latitude of natural origin",0,AUTHORITY["EPSG","8801"]],PARAMETER["Longitude of natural origin",-90,AUTHORITY["EPSG","8802"]],PARAMETER["Scale factor at natural origin",0.9999,AUTHORITY["EPSG","8805"]],PARAMETER["False easting",304800,AUTHORITY["EPSG","8806"]],PARAMETER["False northing",0,AUTHORITY["EPSG","8807"]],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["E",EAST],AXIS["N",NORTH],AUTHORITY["EPSG","2024"]]'
DESCRIPTION 
'DESCRIPTION_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_1234567890_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abcdefghijklmnopqrstuvwxyz_abc_2048';


CREATE SPATIAL REFERENCE SYSTEM IF NOT EXISTS 76757473
NAME 'MSDB_SPREFSYS13_ABCDEFGHIJ_abcdefghi_12345$67890$_123456$7890_$1234567890_$_$_80'
ORGANIZATION 'MYSQL' IDENTIFIED BY 76757473
DEFINITION
'PROJCS["NAD27(CGQ77) / UTM zone 17N",GEOGCS["NAD27(CGQ77)",DATUM["North American Datum 1927 (CGQ77)",SPHEROID["Clarke 1866",6378206.4,294.9786982138982,AUTHORITY["EPSG","7008"]],AUTHORITY["EPSG","6609"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.017453292519943278,AUTHORITY["EPSG","9122"]],AXIS["Lat",NORTH],AXIS["Lon",EAST],AUTHORITY["EPSG","4609"]],PROJECTION["Transverse Mercator",AUTHORITY["EPSG","9807"]],PARAMETER["Latitude of natural origin",0,AUTHORITY["EPSG","8801"]],PARAMETER["Longitude of natural origin",-81,AUTHORITY["EPSG","8802"]],PARAMETER["Scale factor at natural origin",0.9996,AUTHORITY["EPSG","8805"]],PARAMETER["False easting",500000,AUTHORITY["EPSG","8806"]],PARAMETER["False northing",0,AUTHORITY["EPSG","8807"]],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["E",EAST],AXIS["N",NORTH],AUTHORITY["EPSG","2031"]]'
DESCRIPTION 
'Attributes for the statement must satisfy these conditions.Attributes can be given in any order, but no attribute can be given more than once.The NAME and DEFINITION attributes are mandatory.The NAME srs_name attribute value must be unique. The combination of the ORGANIZATION org_name and org_id attribute values must be unique.The NAME srs_name attribute value and ORGANIZATION org_name attribute value cannot be empty or begin or end with whitespace.String values in attribute specifications cannot contain control characters, including newline.The following table shows the maximum lengths for string attribute values.';



-- TABLESPACE
-- ======================


CREATE TABLESPACE MSDB_TABSP42 ADD DATAFILE 'MSDB_TABSP42.ibd' AUTOEXTEND_SIZE=10M EXTENT_SIZE=5M INITIAL_SIZE=20M MAX_SIZE=345M NODEGROUP=123 WAIT COMMENT='This is Tablespace Comment' ENGINE = 'INNODB' ;


CREATE TABLESPACE MSDB_TABSP43 ADD DATAFILE 'MSDB_TABSP43.ibd' AUTOEXTEND_SIZE=1234K EXTENT_SIZE=543M INITIAL_SIZE=23M MAX_SIZE=3456M NODEGROUP=1234 WAIT COMMENT='This is Tablespace Comment' ENGINE = 'INNODB' ENGINE_ATTRIBUTE'{"2":"2000"}';


-- The Max length for comment is 2048 characters

CREATE TABLESPACE MSDB_TABSP45 USE LOGFILE GROUP MSDB_TABSP_LG2 EXTENT_SIZE=20G INITIAL_SIZE=25G MAX_SIZE=50G NODEGROUP=5555 WAIT COMMENT='ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQR_2048' ENGINE = 'INNODB' ENGINE_ATTRIBUTE'{"4":"1234567890"}';


--  Undo Tablespaces supports only these 2 properties

CREATE UNDO TABLESPACE MSDB_TABSP47 ADD DATAFILE 'MSDB_TABSP47.ibu' ENGINE = 'INNODB';

CREATE UNDO TABLESPACE MSDB_TABSP48 ADD DATAFILE 'MSDB_TABSP48.ibu' ENGINE = 'NDB';

-- EVENT
-- ======================

CREATE TABLE E_TAB1
(
tab500_col1 FLOAT,
tab500_col4 VARBINARY(1),
tab500_col6 CHAR NULL,
tab500_col7 CHAR,
tab500_col10 VARCHAR(1),
tab500_col13 SMALLINT,
tab500_col14 INTEGER,
tab500_col15 BIGINT,
tab500_col16 NUMERIC,
tab500_col17 NUMERIC(3),
tab500_col18 NUMERIC(38,30),
tab500_col19 DECIMAL,
tab500_col20 DECIMAL(38),
tab500_col21 BOOLEAN,
tab500_col22 DATE,
tab500_col23 TIME,
tab500_col25 TIMESTAMP,
tab500_col27 VARBINARY(6),
tab500_col29 FLOAT(15),
tab500_col30 CHAR(1),
tab500_col32 VARCHAR(1),
tab500_col34 INT,
tab500_col39 NUMERIC(1),
tab500_col40 NUMERIC(1,0),
tab500_col41 DECIMAL(38,30),
tab500_col42 DECIMAL(1,0),
tab500_col43 DECIMAL(1),
tab500_col44 BOOLEAN
);


CREATE EVENT EV_1 ON SCHEDULE AT '2021-02-25 10:53:31'
DO SELECT DISTINCT
tab500_col1,
tab500_col4,
tab500_col6,
tab500_col7 FROM E_TAB1 WHERE tab500_col1=1;


CREATE EVENT EV_9 ON SCHEDULE EVERY 1 QUARTER
DO SELECT
tab500_col13,
tab500_col14,
tab500_col15,
COUNT(tab500_col15)
OVER(PARTITION BY tab500_col13 ORDER BY tab500_col14 ROWS BETWEEN  UNBOUNDED PRECEDING AND
UNBOUNDED FOLLOWING) FROM E_TAB1;


CREATE EVENT EV_13 ON SCHEDULE EVERY 999999999 MINUTE
DO
SELECT tab500_col14,
tab500_col13,
MAX(tab500_col14) OVER (PARTITION BY tab500_col16 ORDER BY
tab500_col18 ROWS UNBOUNDED PRECEDING) FROM E_TAB1;

-- ON COMPLETION clause

DELIMITER //
CREATE EVENT EV_31
	ON SCHEDULE
		AT '2022-12-18 10:40:44'
	ON COMPLETION NOT PRESERVE
	ENABLE
	COMMENT ''
	DO 
BEGIN
DECLARE total_value INT;
DECLARE ending_value INT;
SET total_value = 50;
SET ending_value = 0;
label1: WHILE total_value <= 3000 DO
SET total_value = total_value * 2;
END WHILE label1;
SET ending_value = total_value;
END;
//
DELIMITER ;

DELIMITER //
CREATE DEFINER = E_USER1 EVENT  EV_36
	ON SCHEDULE
		EVERY 6794832 SECOND STARTS '2020-12-11 12:14:52' + INTERVAL 20 MINUTE ENDS '2020-12-29 20:11:45' + INTERVAL 80 MINUTE
	DISABLE ON SLAVE
	COMMENT 'WITHOUT ON COMPLETION [NOT] PRESERVE CLAUSE'
	DO
BEGIN
DECLARE FN,LN INT;
DECLARE cur CURSOR FOR
  SELECT FName, LName
  FROM Student
  WHERE StuID = id;
OPEN cur;
FETCH cur INTO fn, ln;
CLOSE cur;
END;
// 
DELIMITER ;


DELIMITER $$
CREATE DEFINER = E_USER1 EVENT  EV_37
	ON SCHEDULE
		EVERY 143275538 DAY_SECOND
	DISABLE ON SLAVE
	COMMENT 'WITHOUT ON COMPLETION [NOT] PRESERVE CLAUSE'
	DO
BEGIN
   START TRANSACTION;
   INSERT INTO Withdrawals(WithdrawalCode, IDD, Amount, DateWithdrawn, Approved)
   VALUES (withdrawalcode_p, id_p, amount_p, datewithdrawn_p, approved_p);
   UPDATE account SET AccountBalance = AccountBalance - amount_p WHERE IDD = id_p LIMIT 1;
   COMMIT;
END $$
DELIMITER ;



-- FUNCTION
-- ======================


CREATE DEFINER = rol1 FUNCTION fun_24 (I INT)
RETURNS INT
LANGUAGE SQL
NO SQL
SQL SECURITY INVOKER
RETURN SIN(90)/COS(90);

DELIMITER //
CREATE FUNCTION func_2(st_id tinyint, pol_id tinyint, month_sel tinyint, year_sel smallint)
RETURNS DECIMAL(7.4)
DETERMINISTIC
BEGIN
DECLARE avrg decimal;
SELECT avg(value) into avrg FROM all_data_obs
WHERE month(start_time)=month_sel and year(start_time)=year_sel and station_id=st_id and polutant_id=pol_id;
RETURN avrg;
END //


-- Comments

CREATE FUNCTION fun_25_1 (f float)
RETURNS FLOAT
LANGUAGE SQL
NO SQL
COMMENT 'This is a comment for MariaDB Function'
RETURN SIN(90);

CREATE FUNCTION fun_25_2(T TINYINT)
RETURNS INT Reads SQL data
LANGUAGE SQL
COMMENT 'Use the CREATE FUNCTION statement to create a new stored function. You must have the CREATE ROUTINE database privilege to use CREATE FUNCTION. A function takes any number of arguments and returns a value from the function body. The function body can be any valid SQL expression as you would use, for example, in any select expression. If you have the appropriate privileges, you can call the function exactly as you would any built-in function. See Security below for details on privileges.
You can also use a variant of the CREATE FUNCTION statement to install a user-defined function (UDF) defined by a plugin. See CREATE FUNCTION (UDF) for details.'
RETURN ASCII(T);

CREATE FUNCTION n_fun_2 (f float)
RETURNS DECIMAL
LANGUAGE SQL
READS SQL DATA
RETURN (select fun_12 (i, f));

CREATE DEFINER = CURRENT_USER FUNCTION fdb2.fun_4 (s CHAR(21), c char)
RETURNS DECIMAL
LANGUAGE SQL
NOT DETERMINISTIC
MODIFIES SQL DATA
READS SQL DATA
SQL SECURITY DEFINER
RETURN (select FUN_MAX_LENGTH_OPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFG64());

-- The Splecial Characters can be used if they are quoted with "Backtick"


CREATE DEFINER = CURRENT_USER FUNCTION fdb1.`"!@#$%^&*"` (f float)
RETURNS REAL
LANGUAGE SQL
NO SQL
SQL SECURITY INVOKER
RETURN 5-6;


-- Function with MAX_Length

CREATE Function FUN_MAX_LENGTH_OPQRSTUVWXYZ_ABCDEFGHIJKLMNOPQRSTUVWXYZ_ABCDEFG64()
RETURNS BOOLEAN
READS SQL DATA
LANGUAGE SQL
RETURN ASCII('A');


-- same Function name with different SCHEMA

CREATE SCHEMA fdb1;
CREATE SCHEMA fdb2;
CREATE SCHEMA fdb3;

CREATE FUNCTION fdb1.fun_1()
RETURNS INT DETERMINISTIC
RETURN ASCII('s');

CREATE FUNCTION fdb2.fun_1()
RETURNS BOOLEAN
READS SQL DATA
LANGUAGE SQL
RETURN ASCII('A');

CREATE FUNCTION fdb3.fun_1()
RETURNS INT DETERMINISTIC
RETURN ASCII('s');

-- FUNCTION UDF
-- ======================

-- Prerequisite

GRANT ALL ON mysql TO 'root'@'localhost'; 

INSTALL SONAME 'ha_connect.dll';

-- Start of Script

CREATE FUNCTION jsonvalue 
RETURNS STRING 
SONAME 'ha_connect';

CREATE OR REPLACE FUNCTION json_array_add_values 
RETURNS INTEGER
SONAME 'ha_connect';


CREATE FUNCTION IF NOT EXISTS spider_direct_sql
RETURNS DECIMAL
SONAME 'ha_spider';

CREATE FUNCTION spider_bg_direct_sql
RETURNS DECIMAL
SONAME 'ha_spider';




-- TABLE
-- ======================

-- Table with all supported data types

CREATE TABLE tab_AllDatatypes
(
col1	TINYINT(255),
col2	TINYINT(0),
col3	BOOL,
col4	SMALLINT(0),
col5	SMALLINT(255),
col6	MEDIUMINT(0),
col7	MEDIUMINT(255),
col8	INT(0),
col9	INT(255),
col10	INTEGER(0),
col11	INTEGER(255),
col12	BIGINT,
col13	BIGINT(255),
col14	DECIMAL(0),
col15	DEC(65,30),
col16	NUMERIC(65),
col17	FIXED(65,30),
col18	FLOAT(255,30),
col19	FLOAT(30),
col20	DOUBLE(255,30),
col21	DOUBLE PRECISION(1,1),
col22	REAL(30,30),
col23	BIT(1),
col24	BIT(64),
col25	CHAR(0),
col26	CHAR(255),
col27	VARCHAR(1),
col28	VARCHAR(255),
col29	TINYTEXT,
col30	TEXT,
col31	MEDIUMTEXT,
col32	LONGTEXT,
col33	CHAR BYTE,
col34	BINARY(255),
col35	VARBINARY(0),
col36	VARBINARY(255),
col37	TINYBLOB,
col38	BLOB(0),
col39	BLOB(65535),
col40	MEDIUMBLOB,
col41	LONGTEXT,
col42	LONGBLOB,
col43	ENUM('apple','orange','pear'),
col44	ENUM('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30',
'31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64'),
col45	SET('1'),
col46	SET('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30',
'31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64'),
col47	DATE,
col48	TIME,
col49	TIME(6),
col50	DATETIME,
col51	DATETIME(6),
col52	TIMESTAMP,
col53	TIMESTAMP(6),
col54	TIMESTAMP,
col55	TIMESTAMP(6),
col56	YEAR,
col57	YEAR(4),
col58	GEOMETRY,
col59	POINT,
col60	LINESTRING,
col61	POLYGON,
col62	MULTIPOINT,
col63	MULTILINESTRING,
col64	MULTIPOLYGON,
col65	GEOMETRYCOLLECTION,
col66	JSON
);

CREATE TABLE tab_AllDatatypes2
(
col1 TINYINT,
col2 BOOLEAN,
col3 SMALLINT,
col4 MEDIUMINT,
col5 INT,
col6 INTEGER,
col7 DECIMAL,
col8 DECIMAL(2,1),
col9 NUMERIC,
col10 NUMERIC(10,2),
col11 FIXED,
col12 FIXED(2),
col13 FLOAT,
col14 DOUBLE,
col15 DOUBLE(10,2),
col16 DOUBLE PRECISION,
col17 DOUBLE PRECISION(3,1),
col18 REAL,
col19 REAL(12,3),
col20 BIT,
col21 CHAR,
col22 VARCHAR(12),
col23 BINARY,
col24 VARBINARY(122),
col25 BLOB
);

-- Data type & Column Properties

-- TINYINT
-- Special characters supported in MySQL ($,_)

CREATE TABLE IF NOT EXISTS tab4_$(
tab4_col1 TINYINT(10) SIGNED NOT NULL ,
tab4_col2 TINYINT(200) UNSIGNED NULL,
tab4_col3 TINYINT(11) ZEROFILL,
tab4_col4 TINYINT(100) COLLATE armscii8_general_ci,
tab4_col5 TINYINT AUTO_INCREMENT UNIQUE,
tab4_col6 TINYINT,
tab4_col7 TINYINT(12) GENERATED ALWAYS AS (ROUND(tab4_col6*(1+tab4_col4/100),2)) VIRTUAL,
tab4_col8 TINYINT CHECK (tab4_col8= 1) ENFORCED,
)ENGINE = InnoDB;


-- BOOLEAN
-- Quotes supported in MySQL

CREATE TABLE `tab5_$`(
tab5_col1 BOOLEAN NOT NULL,
tab5_col2 BOOLEAN NULL,
tab5_col3 BOOLEAN DEFAULT 0,
tab5_col4 BOOLEAN DEFAULT 1,
tab5_col5 BOOLEAN NOT NULL AUTO_INCREMENT KEY COMMENT 'string for key_boolean',
tab5_col6 BOOL,
tab5_col7 BOOL COLLATE ascii_general_ci,
tab5_col8 BOOL COLUMN_FORMAT FIXED,
tab5_col9 BOOL,
tab5_col10 BOOL GENERATED ALWAYS AS (tab5_col9 MOD 10) STORED,
tab5_col11 BOOL CHECK (tab5_col11 BETWEEN 1 AND 0) NOT ENFORCED
);

-- SMALLINT

CREATE TABLE IF NOT EXISTS tab6(
tab6_col1 SMALLINT(10) SIGNED NOT NULL,
tab6_col2 SMALLINT(200) UNSIGNED NULL,
tab6_col3 SMALLINT(11) ZEROFILL,
tab6_col4 SMALLINT(255) COLUMN_FORMAT DYNAMIC,
tab6_col5 SMALLINT(67) NOT NULL AUTO_INCREMENT,
tab6_col6 SMALLINT(1) ,
tab6_col7 SMALLINT(100) STORAGE DISK,
tab6_col8 SMALLINT COLLATE big5_chinese_ci,
tab6_col9 SMALLINT(33) ,
tab6_col10 SMALLINT(12) AS (tab6_col9),
KEY IND1 USING BTREE (tab6_col5) INVISIBLE
);

-- MEDIUMINT

CREATE TABLE IF NOT EXISTS `tab7_!@$%^&*()__=+~/?><}{|[]\`(
tab7_col1 MEDIUMINT(10) SIGNED NOT NULL,
tab7_col2 MEDIUMINT(200) UNSIGNED NULL,
tab7_col3 MEDIUMINT(11) ZEROFILL,
tab7_col4 MEDIUMINT(45) DEFAULT +214,
tab7_col5 MEDIUMINT(67) NULL AUTO_INCREMENT,
tab7_col6 MEDIUMINT(1)COLUMN_FORMAT DEFAULT,
tab7_col7 MEDIUMINT(100) COLLATE binary,
tab7_col8 MEDIUMINT STORAGE MEMORY,
tab7_col9 MEDIUMINT(33) COMMENT 'TEST',
tab7_col10 MEDIUMINT(12) GENERATED ALWAYS AS (tab7_col8*tab7_col9) VIRTUAL NOT NULL,
KEY(tab7_col5) COMMENT 'comment for key' KEY_BLOCK_SIZE=1234567890 USING HASH VISIBLE,
tab7_col11 MEDIUMINT,
CONSTRAINT tab7_cons CHECK (tab7_col11 NOT BETWEEN 9 AND 14) ENFORCED
)ENGINE=MyISAM;

-- INT\INTEGER

CREATE TABLE IF NOT EXISTS tab8(
tab8_col1 INT(10) SIGNED NOT NULL,
tab8_col2 INT(200) UNSIGNED NULL,
tab8_col3 INT(11) ZEROFILL,
tab8_col4 INT(45) DEFAULT +1,
tab8_col5 INT(67) NULL AUTO_INCREMENT,
tab8_col6 INT(1) COLLATE cp1250_general_ci,
tab8_col7 INTEGER(100) PRIMARY KEY,
tab8_col8 INTEGER,
tab8_col9 INTEGER(33) ,
tab8_col10 INTEGER(12) GENERATED ALWAYS AS (1*100/20) PERSISTENT,
UNIQUE KEY(tab8_col5) COMMENT 'comment for key',
tab8_col11 INTEGER,
CONSTRAINT tab8_cons CHECK (tab8_col11 LIKE 100) NOT ENFORCED
);

-- BIGINT
-- Table & Column name with maximum length (64 characters)

CREATE TABLE IF NOT EXISTS tab9_1234567890_1234567890_1234567890_1234567890_123456789_12_64(
tab9_col1_1234567890_1234567890_1234567890_1234567890_1234567_64 BIGINT(10) SIGNED NOT NULL,
tab9_col2 BIGINT(200) UNSIGNED NULL,
tab9_col3 BIGINT(11) ZEROFILL,
tab9_col4 BIGINT(45) DEFAULT -1,
tab9_col5 BIGINT(67) NOT NULL AUTO_INCREMENT,
tab9_col6 BIGINT(1) COLLATE cp1251_general_ci,
tab9_col7 BIGINT(100) STORAGE DISK,
tab9_col8 BIGINT ,
tab9_col9 BIGINT(33) ,
tab9_col10 BIGINT(12) GENERATED ALWAYS AS (tab9_col1_1234567890_1234567890_1234567890_1234567890_1234567_64+tab9_col2) STORED,
PRIMARY KEY(tab9_col5) COMMENT 'comment for key',
tab9_col11 BIGINT,
CONSTRAINT symbol CHECK (tab9_col11 LIKE 100 AND tab9_col9 NOT LIKE 100)
)ENGINE=INNODB;


-- CHAR
-- Character set & collation

CREATE TABLE tab14(
tab14_col1 CHAR(10) CHARACTER SET cp932 COLLATE cp932_japanese_ci,
tab14_col2 CHAR(6)  CHARACTER SET dec8 COLLATE dec8_swedish_ci,
tab14_col3 CHAR(11) CHARACTER SET koi8r COLLATE koi8r_general_ci,
tab14_col4 CHAR(45) CHARACTER SET latin2 COLLATE latin2_general_ci,
tab14_col5 CHAR(30) CHARACTER SET swe7 COLLATE swe7_swedish_ci,
tab14_col6 CHAR(39) CHARACTER SET ascii COLLATE ascii_general_ci,
tab14_col7 CHAR(1) CHARACTER SET  hebrew COLLATE hebrew_general_ci,
tab14_col8 CHAR CHARACTER SET euckr COLLATE euckr_korean_ci,
tab14_col9 CHAR(4) CHARACTER SET gb2312 COLLATE gb2312_chinese_ci,
tab14_col10 CHAR(12) CHARACTER SET gbk COLLATE gbk_chinese_ci,
tab14_col11 CHAR CHARACTER SET latin5 COLLATE latin5_turkish_ci,
tab14_col12 CHAR(10)CHARACTER SET cp866 COLLATE cp866_general_ci,
tab14_col13 CHAR(6) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
tab14_col14 CHAR(11) CHARACTER SET cp1257 COLLATE cp1257_general_ci AS ('satya') VIRTUAL,
tab14_col15 CHAR(45) CHARACTER SET eucjpms COLLATE eucjpms_japanese_ci CHECK (tab14_col15 = 'satya' OR tab14_col15!= 'villa'),
tab14_col16 CHAR COLLATE keybcs2_general_ci
);

-- JSON,ENUM,SET

CREATE TABLE IF NOT EXISTS tab26(
tab26_col1 JSON,
tab26_col2 JSON NULL CHECK (JSON_VALID(tab26_col2)),
tab26_col3 JSON AS (tab26_col1-tab26_col2),
tab26_col4 ENUM('test1','test2','test3','test4') DEFAULT 'test4',
tab26_col5 ENUM('1111','2111','3111') GENERATED ALWAYS AS (tab26_col4) VIRTUAL,
tab26_col6 ENUM('111111','21111','31111') CHECK (tab26_col6!='111111'),
tab26_col7 ENUM('1','2','3') CHARACTER SET cp850 COLLATE cp850_general_ci,
tab26_col8 ENUM('Apple','Banana','orange')  CHARACTER SET hp8 COLLATE hp8_english_ci,
tab26_col9 ENUM('1111','2111','3111') CHARACTER SET ujis COLLATE ujis_japanese_ci,
tab26_col10 SET('1111','2111','3111') GENERATED ALWAYS AS (tab26_col9) VIRTUAL,
tab26_col11 SET('111111','21111','31111') CHECK (tab26_col11='111111'),
tab26_col12 SET('1','2','3') DEFAULT '',
tab26_col13 SET('') CHARACTER SET cp850 COLLATE cp850_general_ci,
tab26_col14 SET('Apple','Banana','orange')  CHARACTER SET hp8 COLLATE hp8_english_ci,
tab26_col15 SET('1111','2111','3111') CHARACTER SET ujis COLLATE ujis_japanese_ci,
tab26_col16 SET ('1@','2#','3$') CHARACTER SET sjis COLLATE sjis_japanese_ci
);

 -- DEFAULT constraint

CREATE TABLE tab40
(
tab40_Col1 INT DEFAULT 1 PRIMARY KEY,
tab40_Col2 CHAR(100) NOT NULL DEFAULT '!@#$%^&*()?03/30/2009<>{}"::"~##@11tab#',
tab40_col3 DATE,
tab40_col4 VARCHAR(10) DEFAULT '"test_$"',
tab40_col5 TIMESTAMP UNIQUE,
tab40_col6 TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
tab40_col7 TIMESTAMP DEFAULT '1996.12.29 01:01:01',
tab40_col8 DATE,
tab40_col9 DECIMAL DEFAULT 123.1,
tab40_col10 TIMESTAMP DEFAULT '2001.12.01',
tab40_col11 CHAR(123) DEFAULT 'test1test2',
tab40_col12 FLOAT DEFAULT 0E0,
tab40_col13 DATE,
tab40_col14 CHARACTER(8) DEFAULT "USER",
tab40_col15 CHAR(4) DEFAULT '0000',
tab40_col16 DOUBLE PRECISION DEFAULT 9999999999999.956
);


--PARTITIONS
--RANGE

CREATE TABLE tab55(
   tab55_col1 INT NOT NULL,
   tab55_col2 VARCHAR(20) NOT NULL,
   tab55_col3 TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB
PARTITION BY RANGE ( UNIX_TIMESTAMP(tab55_col3) ) PARTITIONS 13(
   PARTITION p_first VALUES LESS THAN ( UNIX_TIMESTAMP('2016-10-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10 MIN_ROWS=10000 COMMENT='Partition1',
   PARTITION p201610 VALUES LESS THAN ( UNIX_TIMESTAMP('2016-11-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=100 MIN_ROWS=1009 COMMENT='Partition2',
   PARTITION p201611 VALUES LESS THAN ( UNIX_TIMESTAMP('2016-12-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=101 MIN_ROWS=1000 COMMENT='Partition3',
   PARTITION p201612 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-01-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=1000 MIN_ROWS=100 COMMENT='Partition4',
   PARTITION p201701 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-02-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=1080 MIN_ROWS=10000 COMMENT='Partition4',
   PARTITION p201702 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-03-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10999 MIN_ROWS=10011 COMMENT='Partition5',
   PARTITION p201703 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-04-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10999 MIN_ROWS=10022 COMMENT='Partition6',
   PARTITION p201704 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-05-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10888 MIN_ROWS=33333 COMMENT='Partition7',
   PARTITION p201705 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-06-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10892 MIN_ROWS=333367 COMMENT='Partition8',
   PARTITION p201706 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-07-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10222 MIN_ROWS=10078 COMMENT='Partition9',
   PARTITION p201707 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-08-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10123 MIN_ROWS=10067 COMMENT='Partition10',
   PARTITION p201708 VALUES LESS THAN ( UNIX_TIMESTAMP('2017-09-01 00:00:00')) ENGINE='Innodb' MAX_ROWS=10134 MIN_ROWS=100567 COMMENT='Partition11',
   PARTITION p_future VALUES LESS THAN (MAXVALUE) ENGINE='Innodb' MAX_ROWS=1013456 MIN_ROWS=10056733 COMMENT='Partition12'
);

--Tablespace not accepting in partition table need to check 

CREATE TABLE tab56 (
    tab56_col1 INT,
    tab56_col2 INT
)
PARTITION BY RANGE COLUMNS(tab56_col1,tab56_col2) (
    PARTITION p0 VALUES LESS THAN (0,10) STORAGE ENGINE = 'Innodb' MAX_ROWS=10000 MIN_ROWS=100000 TABLESPACE=TB3,
    PARTITION p1 VALUES LESS THAN (10,20) STORAGE ENGINE = 'Innodb' TABLESPACE=TB3,
    PARTITION p2 VALUES LESS THAN (10,30) STORAGE ENGINE = 'Innodb' DATA DIRECTORY='C:/Program Files/ariaDB 10.4/data/tab130_data1',
    PARTITION p3 VALUES LESS THAN (10,35) STORAGE ENGINE = 'Innodb' INDEX DIRECTORY='C:/Program Files/ariaDB 10.4/INDEX/tab130_index1',
    PARTITION p4 VALUES LESS THAN (20,40) STORAGE ENGINE = 'Innodb' COMMENT ='Partitions on tab130',
    PARTITION p5 VALUES LESS THAN (MAXVALUE,MAXVALUE)ENGINE = 'Innodb' TABLESPACE=TB3
 );
 
 CREATE TABLE tab57
(
   tab57_col1 INT(11) NOT NULL PRIMARY KEY,
   tab57_col2 VARCHAR(20) NOT NULL,
   tab57_col3 BOOL NULL,
   tab57_col4 VARCHAR(10),
   tab57_col5 CHAR(100),
   tab57_col6 VARCHAR(12)
)
PARTITION BY RANGE(FLOOR(tab57_col1)) PARTITIONS 3
SUBPARTITION BY HASH(CEIL(tab57_col1)) SUBPARTITIONS 2
(
PARTITION tab131_p1 VALUES LESS THAN(1) DATA DIRECTORY='C:/Program Files/ariaDB 10.4/data/tab131_data1' INDEX DIRECTORY='C:/Program Files/ariaDB 10.4/INDEX/tab131_index1'
(
SUBPARTITION sp1 ENGINE='Innodb',
SUBPARTITION sp2 ENGINE='Innodb' MAX_ROWS=10 INDEX DIRECTORY='C:/Program Files/ariaDB 10.4/INDEX/tab131_index1'
),
PARTITION tab131_p2 VALUES LESS THAN (2) COMMENT='Partition on tab131' MAX_ROWS=10
(
SUBPARTITION sp3 ENGINE='Innodb' MIN_ROWS=100,
SUBPARTITION sp4 ENGINE='Innodb' COMMENT ='Sub Partitions'
),
PARTITION tab131_p3 VALUES LESS THAN MAXVALUE ENGINE='Innodb' MIN_ROWS=10 MAX_ROWS=100
(
SUBPARTITION sp5 ENGINE='Innodb',
SUBPARTITION sp6 ENGINE='Innodb' COMMENT ='Sub Partitions2'DATA DIRECTORY='C:/Program Files/ariaDB 10.4/data/tab131_data'
));


-- Maximum supported comment length for partitions (1024)

CREATE TABLE tab64
(
tab64_col1 INT NULL,
tab64_col2 BOOLEAN NOT NULL,
tab64_col3 SMALLINT,
tab64_col4 VARCHAR(12),
tab64_col5 DATETIME,
tab64_col6 DATE,
tab64_col7 TIMESTAMP
)ENGINE='InnoDB'
PARTITION BY LIST (WEEKDAY(tab64_col5)) PARTITIONS 2
SUBPARTITION BY LINEAR KEY ALGORITHM=1(tab64_col3) SUBPARTITIONS 2
(
PARTITION part1 VALUES IN (1,3)
COMMENT='12345678)10-345678)20-345678)30-345678)40-345678)50-345678)60-345678)70-345678)80-345678)90-345678)100-45678)110-45678)120-45678)130-45678)140-45678)150
-45678)160-45678)170-45678)180-45678)190-45678)200-45678)210-45678)220-45678)230-45678)240-45678)250-45678)260-45678)270-45678)280-45679)290-45678)300
-45678)310-45678)320-45678)330-45678)340-45678)350-45678)360-45678)370-45678)380-45678)390-45678)400-45678)410-45678)420-45678)430-45678)440-45678)450
-45678)460-45678)470-45678)480-45678)490-45678)500-45678)510-45678)520-45678)530-45678)540-45678)550-45678)560-45678)570-45678)580-45678)590-45678)600
-45678)610-45678)620-45678)630-45678)640-45678)650-45678)660-45678)670-45678)680-45678)690-45678)700-45678)710-45678)720-45678)730-45678)740-45678)750
-45678)760_45678)770_45678)780-45678)790-45678)800-45678)810-45678)820-45678)830-45678)840-45678)850-45678)860-45678)870-45678)880-45678)890-45678)900
-45678)910-45678)920-45678)930-45678)940-45678)950-45678)960-45678)970_45678)980_45678)990-45)1000_23456781024123456'
(
SUBPARTITION sp01,
SUBPARTITION sp02
),
PARTITION part2 VALUES IN (10000000000,12222222222222)
(
SUBPARTITION sp03,
SUBPARTITION sp04 
COMMENT='12345678)10-345678)20-345678)30-345678)40-345678)50-345678)60-345678)70-345678)80-345678)90-345678)100-45678)110-45678)120-45678)130-45678)140-45678)150
-45678)160-45678)170-45678)180-45678)190-45678)200-45678)210-45678)220-45678)230-45678)240-45678)250-45678)260-45678)270-45678)280-45679)290-45678)300
-45678)310-45678)320-45678)330-45678)340-45678)350-45678)360-45678)370-45678)380-45678)390-45678)400-45678)410-45678)420-45678)430-45678)440-45678)450
-45678)460-45678)470-45678)480-45678)490-45678)500-45678)510-45678)520-45678)530-45678)540-45678)550-45678)560-45678)570-45678)580-45678)590-45678)600
-45678)610-45678)620-45678)630-45678)640-45678)650-45678)660-45678)670-45678)680-45678)690-45678)700-45678)710-45678)720-45678)730-45678)740-45678)750
-45678)760_45678)770_45678)780-45678)790-45678)800-45678)810-45678)820-45678)830-45678)840-45678)850-45678)860-45678)870-45678)880-45678)890-45678)900
-45678)910-45678)920-45678)930-45678)940-45678)950-45678)960-45678)970_45678)980_45678)990-45)1000_23456781024123456'
));

CREATE TABLE tab65 (tab65_col1 INT,tab65_col2 DATE)
    PARTITION BY RANGE( YEAR(tab65_col2) )
    SUBPARTITION BY LINEAR KEY ALGORITHM=2(tab65_col2) (
        PARTITION p0 VALUES LESS THAN (1990) (
            SUBPARTITION s0,
            SUBPARTITION s1
        ),
        PARTITION p1 VALUES LESS THAN (2000) (
            SUBPARTITION s2,
            SUBPARTITION s3
        ),
        PARTITION p2 VALUES LESS THAN MAXVALUE (
            SUBPARTITION s4,
            SUBPARTITION s5
        )
    );